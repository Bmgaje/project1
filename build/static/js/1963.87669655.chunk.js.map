{"version":3,"file":"static/js/1963.87669655.chunk.js","mappings":"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","sources":["components/Widgets/Statistic/Notification.js","components/Badge/Badge.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Notification = (props) => {\n  return (\n    <React.Fragment>\n      <Alert variant=\"warning\">\n        {props.message}\n        <Alert.Link href={props.link} target=\"_blank\" className=\"float-right\">\n          {/* Demo & Documentation */}\n        </Alert.Link>\n      </Alert>\n    </React.Fragment>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n  link: PropTypes.string\n};\n\nexport default Notification;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Table, Form, InputGroup, Button, Modal } from 'react-bootstrap';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAdd, faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport axios from 'axios';\nimport { Urls, imgUrl } from '../../helpers/Urls';\nimport Notification from '../Widgets/Statistic/Notification';\nimport '../Badge/css/badge.css';\nimport 'animate.css';\nimport { SlBadge } from 'react-icons/sl';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nexport default function Badge() {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  let [badgeData, setBadgeData] = useState([]);\n  let [loading, setLoading] = useState(false);\n\n  const [totalPages, setTotalPages] = useState(null);\n  const [page, setPage] = useState(location?.state?.page || 1);\n  const [limit, setLimit] = useState(location?.state?.limit || 10);\n  const [search, setSearch] = useState('');\n\n  const [deleteRecord, setDeleteRecord] = useState(null);\n  const [show, setShow] = useState(false);\n  let [deleteNotification, setDeleteNotification] = useState(false);\n\n  const [__id, setID] = useState();\n  const [statusNoti, setStatusNoti] = useState(false);\n\n  let [totaldocs, setTotaldocs] = useState('');\n  let [currentChunk, setCurrentChunk] = useState(0);\n\n  function getBadge() {\n    setLoading(true);\n    axios\n      .get(Urls.get.getBadges + `?page=${page}&limit=${limit}&q=${search}&is_delete=no`)\n      .then((res) => {\n        setBadgeData(res?.data?.data?.docs);\n        setTotalPages(res?.data?.data?.totalPages);\n        setTotaldocs(res?.data?.data?.totalDocs);\n        setPage(res?.data?.data?.page);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    getBadge();\n  }, [page, limit, search]);\n\n  const handleLimit = (e) => {\n    setLimit(e.target.value);\n    setPage(1);\n  };\n\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n  };\n\n  function handleStatus(e) {\n    e.preventDefault();\n    const payload = {\n      status: e.target.value\n    };\n    axios.put(Urls.put.badgeStatus + __id, payload).then(() => {\n      setStatusNoti(true);\n      setTimeout(() => {\n        setStatusNoti(false);\n        getBadge();\n      }, 2000);\n      //  alert(\"Status change successfully.\")\n    });\n  }\n\n  const deleteItem = () => {\n    axios.delete(Urls.delete.deleteBadge + deleteRecord).then(() => {\n      setDeleteNotification(true);\n      setTimeout(() => {\n        setDeleteNotification(false);\n        getBadge();\n      }, 2000);\n    });\n  };\n\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  const deleteBTN = () => {\n    handleClose();\n    deleteItem();\n  };\n\n  // Pagination button\n  const pagesPerChunk = 5;\n  const totalChunks = Math.ceil(totalPages / pagesPerChunk);\n\n  const handleNext = () => {\n    if (currentChunk < totalChunks - 1) {\n      setCurrentChunk(currentChunk + 1);\n    }\n  };\n  const handlePrev = () => {\n    if (currentChunk > 0) {\n      setCurrentChunk(currentChunk - 1);\n    }\n  };\n\n  const handlePageClick = (pageNumber) => {\n    setPage(pageNumber);\n    navigate(location.pathname, { replace: true, state: pageNumber });\n  };\n\n  const chunkStartPage = currentChunk * pagesPerChunk + 1;\n  const chunkEndPage = Math.min(chunkStartPage + pagesPerChunk - 1, totalPages);\n  const pages = [];\n  for (let i = chunkStartPage; i <= chunkEndPage; i++) {\n    pages.push(i);\n  }\n\n  // Showing of 1 to 10 of 100 entries.\n  const indexOfLastEntry = page * limit;\n  const indexOfFirstEntry = indexOfLastEntry - limit;\n\n  const startEntry = indexOfFirstEntry + 1;\n  const endEntry = Math.min(indexOfLastEntry, totaldocs);\n\n  // ******* Start of import file code  ******\n  let [emptyMsg, setEmptyMsg] = useState(false);\n  let [fileImportMsg, setFileImportMsg] = useState(false);\n  let [repeatDataMsg, setRepeatDataMsg] = useState(false);\n  let [selectedFile, setSelectedFile] = useState(null);\n  let [loadingUpload, setLoadingUpload] = useState(false);\n\n  const handleFileChange = (e) => {\n    setSelectedFile(e.target.files[0]);\n  };\n\n  // Handle file upload\n  const handleFileUpload = async () => {\n    if (!selectedFile) {\n      setEmptyMsg(true);\n      setTimeout(() => {\n        setEmptyMsg(false);\n      }, 2000);\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('Badge', selectedFile); // 'Country' is the key expected by the API\n\n    try {\n      setLoadingUpload(true);\n\n      const response = await axios.post(Urls.post.badgeImport, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.data) {\n        setFileImportMsg(true);\n        setTimeout(() => {\n          setFileImportMsg(false);\n        }, 2000);\n      }\n    } catch (error) {\n      setRepeatDataMsg(true);\n      setTimeout(() => {\n        setRepeatDataMsg(false);\n      }, 3000);\n    } finally {\n      setLoadingUpload(false);\n    }\n  };\n  // ***** End of import file code ******\n\n  return (\n    <div>\n      <div className=\"row position-relative\">\n        <div className=\"col-3 offset-9 position-fixed z-3\" style={{ top: '60px', right: '20px' }}>\n          {deleteNotification ? (\n            <b>\n              <Notification message=\"Badge delete successfully.\" />\n            </b>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"row position-relative\">\n        <div className=\"col-3 offset-9 position-fixed z-3\" style={{ top: '60px', right: '20px' }}>\n          {emptyMsg ? (\n            <b>\n              <Notification message=\"Please select a CSV file to import! 😥\" />\n            </b>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"row position-relative\">\n        <div className=\"col-3 offset-9 position-fixed z-3\" style={{ top: '60px', right: '20px' }}>\n          {fileImportMsg ? (\n            <b>\n              <Notification message=\"File imported successfully! 😍\" />\n            </b>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"row position-relative\">\n        <div className=\"col-3 offset-9 position-fixed z-3\" style={{ top: '60px', right: '20px' }}>\n          {statusNoti ? (\n            <b>\n              <Notification message=\"Status change successfully 😍\" />\n            </b>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"row position-relative\">\n        <div className=\"col-4 offset-8 position-fixed z-3\" style={{ top: '60px', right: '20px' }}>\n          {repeatDataMsg ? (\n            <b>\n              <Notification message=\"Please check your CSV file repeated data is not allow !\" />\n            </b>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"row pb-3\">\n        <div className=\"col-2 offset-10\">\n          <div className=\"d-flex justify-content-evenly align-items-center\">\n            <div className=\"text-dark\">Limit :</div>\n            <div>\n              <select className=\"btn btn-light p-1\" style={{ border: '1px solid #10446c' }} onChange={handleLimit} value={limit}>\n                <option value=\"10\">10</option>\n                <option value=\"20\">20</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n                <option value=\"500\">500</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Row className=\"mainBadge animate__animated animate__fadeInRight\">\n        <Col>\n          <Card style={{ borderRadius: 15, border: '1px solid #10446c' }}>\n            <Card.Header\n              style={{\n                borderBottom: '1px dashed #10446c'\n              }}\n            >\n              <Row>\n                <div className=\"col-7 pt-1\">\n                  <Card.Title as=\"h4\">\n                    <SlBadge\n                      style={{\n                        color: '#10446c',\n                        marginRight: '8px',\n                        fontSize: '40px',\n                        padding: '5px',\n                        backgroundColor: '#f1faee',\n                        borderRadius: '50%',\n                        border: '2px dashed #10446c'\n                      }}\n                    />\n                    <b style={{ color: '#10446c' }}>Badge Table</b>\n                  </Card.Title>\n                </div>\n\n                <div className=\"col-3 d-flex\">\n                  <Form.Group className=\"mb-3\" as={Col} controlId=\"exampleForm.ControlSelect1\">\n                    <InputGroup>\n                      <Form.Control\n                        className=\"bg-white py-2 \"\n                        size=\"sm\"\n                        style={{ border: '1px solid #10446c' }}\n                        type=\"text\"\n                        onChange={handleSearch}\n                        placeholder=\" Search\"\n                      />\n                    </InputGroup>\n                  </Form.Group>\n                </div>\n\n                <div className=\"col-2 d-flex\">\n                  <div>\n                    <Link to={'/addbadge'}>\n                      <Button style={{ backgroundColor: ' #10446c', border: 'none' }} size=\"sm\">\n                        Add <FontAwesomeIcon icon={faAdd} />\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </Row>\n              <Row>\n                <div className=\"col-4 pt-2\">\n                  <Form.Label style={{ fontWeight: 'bold', color: ' #10446c' }}>Select CSV File</Form.Label>\n                  <input type=\"file\" accept=\".csv\" style={{ border: '1px solid  #10446c', borderRadius: 4 }} onChange={handleFileChange} />\n                </div>\n\n                <div className=\"col-2 pt-2\">\n                  <button className=\"btn  btn-sm btn-danger mt-4\" onClick={handleFileUpload} disabled={loadingUpload}>\n                    {loadingUpload ? 'Importing...' : 'Import'}\n                  </button>\n                </div>\n              </Row>\n            </Card.Header>\n            <Card.Body>\n              {loading ? (\n                <div className=\"text-center\">\n                  <ScaleLoader color=\"#10446c\" />\n                  <h6 className=\"text-danger mt-3\">Loading.....</h6>\n                </div>\n              ) : badgeData?.length === 0 ? (\n                <div className=\"text-center pt-3 pb-3\">\n                  <h6 className=\"text-danger\">No data available ! 😥</h6>\n                </div>\n              ) : (\n                <Table responsive hover bordered>\n                  <thead className=\"tableHeader\">\n                    <tr className=\"text-center\">\n                      <th>Sr No.</th>\n                      <th>Icon</th>\n                      <th>Badge Type</th>\n                      <th>Title</th>\n                      <th>Description</th>\n                      <th>Status</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  {badgeData.map((item, index) => {\n                    return (\n                      <tbody key={index} className=\"tableBody\">\n                        <tr>\n                          <td className=\"text-center\">{index + 1}</td>\n                          <td>\n                            <img src={imgUrl + item?.icon} style={{ width: '30px', height: '30px' }} alt=\"\" />\n                          </td>\n                          <td>{item?.badgeType ? item?.badgeType : 'NA'}</td>\n                          <td>{item?.title ? item?.title : 'NA'}</td>\n                          <td>{item?.description ? item?.description : 'NA'}</td>\n                          <td className=\"text-center\">\n                            <select\n                              className=\"btn btn-light p-1 dropdown-toggle\"\n                              style={{ border: '1px solid #10446c' }}\n                              onChange={handleStatus}\n                              onClick={() => setID(item._id)}\n                              value={item?.status}\n                            >\n                              <option value=\"active\">Active</option>\n                              <option value=\"draft\">In-Active</option>\n                            </select>\n                          </td>\n\n                          <td className=\"text-center\">\n                            <Link to={location?.state?.page || 1}>\n                              <Button\n                                variant=\"danger\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setShow(true);\n                                  setDeleteRecord(item._id);\n                                }}\n                              >\n                                <FontAwesomeIcon icon={faTrash} />\n                              </Button>\n                            </Link>\n                            <Link to={'/editbadge/' + item._id} state={{ page, limit }} className=\"text-white\">\n                              <Button variant=\"success\" size=\"sm\">\n                                <FontAwesomeIcon icon={faEdit} />\n                              </Button>\n                            </Link>\n                          </td>\n                        </tr>\n                      </tbody>\n                    );\n                  })}\n                </Table>\n              )}\n\n              {/* Pagination */}\n\n              <div className=\"container \">\n                <div className=\"row d-flex justify-content-center\">\n                  <div className=\"col-6 pt-3 \">\n                    <div\n                      style={{\n                        borderLeft: '5px solid #10446c',\n                        paddingLeft: '5px'\n                      }}\n                    >\n                      <h5 style={{ color: '#10446c', fontSize: '16px' }}>\n                        Showing {startEntry} to {endEntry} of {totaldocs} entries.\n                      </h5>\n                    </div>\n                  </div>\n\n                  <div className=\"col-6 pt-3 text-center \">\n                    <Button\n                      onClick={handlePrev}\n                      type=\"button\"\n                      className=\"btn btn-sm\"\n                      style={{ backgroundColor: '#10446c', border: 'none' }}\n                      disabled={currentChunk === 0}\n                    >\n                      {'<'}\n                    </Button>\n\n                    {pages.map((value) => {\n                      return (\n                        <button\n                          key={value}\n                          type=\"button\"\n                          className={page === value ? 'btn btn-sm btn-primary rounded-circle' : 'btn btn-sm btn-dark'}\n                          onClick={() => handlePageClick(value)}\n                        >\n                          {value}\n                        </button>\n                      );\n                    })}\n\n                    <Button\n                      onClick={handleNext}\n                      type=\"button\"\n                      className=\"btn btn-sm \"\n                      style={{ backgroundColor: '#10446c', border: 'none' }}\n                      disabled={currentChunk === totalChunks - 1}\n                    >\n                      {'>'}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* <Card title=\"Pagination\" className=\"d-flex align-items-center pt-3\">\n                <Pagination>\n                  {Array(totalPages)\n                    .fill('')\n                    .map((item, index) => (\n                      <Pagination.Item key={index} onClick={() => setPage(index + 1)}>\n                        {index + 1}\n                      </Pagination.Item>\n                    ))}\n                </Pagination>\n              </Card> */}\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title className=\"text-danger\">Alert</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Are you sure want to delete the badge ?</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"dark\" size=\"sm\" onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button variant=\"danger\" size=\"sm\" onClick={deleteBTN}>\n              Delete\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </Row>\n    </div>\n  );\n}\n"],"names":["props","_jsx","React","children","_jsxs","Alert","variant","message","Link","href","link","target","className","Badge","_location$state","_location$state2","navigate","useNavigate","location","useLocation","badgeData","setBadgeData","useState","loading","setLoading","totalPages","setTotalPages","page","setPage","state","limit","setLimit","search","setSearch","deleteRecord","setDeleteRecord","show","setShow","deleteNotification","setDeleteNotification","__id","setID","statusNoti","setStatusNoti","totaldocs","setTotaldocs","currentChunk","setCurrentChunk","getBadge","axios","get","Urls","getBadges","then","res","_res$data","_res$data$data","_res$data2","_res$data2$data","_res$data3","_res$data3$data","_res$data4","_res$data4$data","data","docs","totalDocs","finally","useEffect","handleStatus","e","preventDefault","payload","status","value","put","badgeStatus","setTimeout","handleClose","totalChunks","Math","ceil","chunkStartPage","chunkEndPage","min","pages","i","push","indexOfLastEntry","startEntry","endEntry","emptyMsg","setEmptyMsg","fileImportMsg","setFileImportMsg","repeatDataMsg","setRepeatDataMsg","selectedFile","setSelectedFile","loadingUpload","setLoadingUpload","style","top","right","Notification","border","onChange","Row","Col","Card","borderRadius","Header","borderBottom","Title","as","SlBadge","color","marginRight","fontSize","padding","backgroundColor","Form","Group","controlId","InputGroup","Control","size","type","placeholder","to","Button","FontAwesomeIcon","icon","faAdd","Label","fontWeight","accept","files","onClick","async","formData","FormData","append","post","badgeImport","headers","error","disabled","Body","ScaleLoader","length","Table","responsive","hover","bordered","map","item","index","_location$state3","src","imgUrl","width","height","alt","badgeType","title","description","_id","faTrash","faEdit","borderLeft","paddingLeft","handlePrev","handlePageClick","pageNumber","pathname","replace","handleNext","Modal","onHide","closeButton","Footer","deleteBTN","delete","deleteBadge"],"sourceRoot":""}